import { useCallback, useEffect } from 'react';
import { Button, Stack } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { DefaultDialog } from '@admin/app/components';
import { errorMessage, FormContainer, RHFTextField, use<%= className %>, useToasty } from '@libs/react-core';
import { object, string } from 'yup';
import { I<%= className %> } from '@libs/types';

export interface AddEdit<%= className %>DialogProps {
    onSubmit?: (values: I<%= className %>) => void;
    onClose?: () => void;
    initialValue?: Partial<I<%= className %>>
}

const validationSchema = yupResolver(object({
    <% columns.forEach(column => { %><%= column.normalizeName.propertyName %>: string().label('<%= column.normalizeName.name %>'), <% }) %>
}));

const defaultValues: Partial<I<%= className %>> = {
    <% columns.forEach(column => { %><%= column.normalizeName.propertyName %>: "", <% }) %>
}

export default function AddEdit<%= className %>Dialog({
    onClose,
    initialValue,
    onSubmit,
}: AddEdit<%= className %>DialogProps) {

    const { useUpdate<%= className %>, useCreate<%= className %> } = use<%= className %>();
    const { mutateAsync: update<%= className %> } = useUpdate<%= className %>();
    const { mutateAsync: create<%= className %> } = useCreate<%= className %>();
    const { showToasty } = useToasty();

    const formContext = useForm({
        defaultValues,
        resolver: validationSchema,
    })
    const { reset } = formContext;

    const handleSubmit = useCallback(
        async (values: Partial<I<%= className %>>) => {
            try {
                let resp;
                if (initialValue?.id) {
                    resp = await update<%= className %>({
                        ...values,
                        id: initialValue?.id
                    })
                } else {
                    resp = await create<%= className %>(values)
                }

                if (onSubmit) { onSubmit(resp) }
                if (onClose) { onClose() }

                showToasty('<%= title %> successfully saved')
                return resp;
            } catch (error) {
                showToasty(errorMessage(error, "Error while saving <%= title %>"), 'error');
                throw error;
            }
        },

        [create<%= className %>, initialValue?.id, onClose, onSubmit, showToasty, update<%= className %>],
    )

    useEffect(() => {
        reset({
            ...initialValue,
        })
    }, [reset, initialValue]);

    return (
        <DefaultDialog
            onClose={onClose}
            title={defaultValues?.id ? 'Edit <%= title %>' : 'Add <%= title %>'}
            actions={
                <>
                    <Button onClick={onClose}>Cancel</Button>
                    <LoadingButton
                        type="submit"
                        form="add-edit-<%= fileName %>-form"
                        variant="contained"
                        color="primary"
                        disabled={formContext?.formState?.isSubmitting}
                        loading={formContext?.formState?.isSubmitting}
                    >
                        Save
                    </LoadingButton>
                </>
            }
        >
            <FormContainer
                FormProps={{
                    id: "add-edit-<%= fileName %>-form"
                }}
                formContext={formContext}
                validationSchema={validationSchema}
                onSuccess={handleSubmit}
            >
                <Stack spacing={2}>
                 <% columns.forEach(column => { %><RHFTextField
                    label="<%= column.normalizeName.name %>"
                    name="<%= column.normalizeName.propertyName %>"
                    fullWidth
                /><% }) %>
                </Stack>

            </FormContainer>
        </DefaultDialog>
    );
}
